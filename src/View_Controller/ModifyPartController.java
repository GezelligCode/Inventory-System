package View_Controller;

import Model.InHouse;
import Model.Inventory;
import Model.Outsourced;
import Model.Part;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import static View_Controller.MainController.*;

/** FXML Controller Class*/
public class ModifyPartController implements Initializable
{
    @FXML private ToggleGroup toggleSource;
    @FXML private TextField modifiedPartId;
    @FXML private TextField modifiedPartName;
    @FXML private TextField modifiedStockInput;
    @FXML private TextField modifiedPartPrice;
    @FXML private TextField modifiedPartMax;
    @FXML private TextField modifiedPartMin;
    @FXML private TextField modifiedSource;
    @FXML private RadioButton inHouseToggle;
    @FXML private RadioButton outsourceToggle;
    @FXML private Label modifiedSourceName;
    @FXML private Label errorOutput;


    /** A string variable that will store all the error outputs generated from the Inventory Class method, inputValidator.
     This variable is used during the savePartHandler, where all user inputs are validated prior to saving the part.
     If any errors are caught, the contents of the errorOutPutString are displayed on the Modify Part window in red text.
     */
    private String errorOutputString = new String();

    /** Gets the current inventory to update with modified part.
     */
    private Inventory inventory = getCurrentInventory();

    /** Gets the part to modify, selected by the user during the Main Screen.
     */
    private Part modifiedPart = getSelectedPart();

    /** Gets the index of the user-selected part, for identifying the correct index at which to update the inventory.
     */
    int modifiedPartIndex = getSelectedPartIndex();


    /** Sets the initial conditions of the Modify Part scene. This method sets the ID field to disabled, with pre-populated
     text, "Auto-generated". In addition, it pre-populates all fields of the form with the properties of the selected
     part.
     @param url Resolves the relative file path of the root object.
     @param rb Localizes the root object.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb)
    {
        modifiedPartId.setDisable(true);
        modifiedPartId.setText(Integer.toString(modifiedPart.getId()));
        modifiedPartName.setText(modifiedPart.getName());
        modifiedStockInput.setText(Integer.toString(modifiedPart.getStock()));
        modifiedPartPrice.setText(Double.toString(modifiedPart.getPrice()));
        modifiedPartMin.setText(Integer.toString(modifiedPart.getMin()));
        modifiedPartMax.setText(Integer.toString(modifiedPart.getMax()));
        if(modifiedPart instanceof Outsourced)
        {
            String companyName = ((Outsourced) modifiedPart).getCompanyName();
            modifiedSource.setText(companyName);
            outsourceToggle.setSelected(true);
        }
        else
        {
            int machineId = ((InHouse) modifiedPart).getMachineId();
            modifiedSource.setText(Integer.toString(machineId));
            inHouseToggle.setSelected(true);

        }
    }

    /** Enables the user to select either InHouse or Outsourced, but not both. Based on this user selection, the label
     sourceName will change to 'Machine ID' or 'Company Name'.
     @param event An object generated by the ActionEvent that is triggered by the user clicking either the InHouse or
     Outsourced radio buttons.
     */
    @FXML
    private void sourceToggleHandler(ActionEvent event)
    {
        if(event.getSource() == inHouseToggle)
        {
            modifiedSourceName.setText("Machine ID");
        }
        else
        {
            modifiedSourceName.setText("Company Name");
        }
    }

    /** Saves the modified part into the current inventory. The method will validate all entries in the form and output
     any applicable errors on the form in red text. Otherwise if no errors are found, then the method updates the
     current inventory with the modified part.
     @param event An object generated by the ActionEvent that is triggered by the user clicking the Save button.
     */
    @FXML
    private void saveModifiedPartHandler(ActionEvent event) throws IOException
    {
        try
        {
            int partId = Integer.parseInt(modifiedPartId.getText());
            String partName = modifiedPartName.getText();
            int partStock = Integer.parseInt(modifiedStockInput.getText());
            double partPrice = Double.parseDouble(modifiedPartPrice.getText());
            int partMin = Integer.parseInt(modifiedPartMin.getText());
            int partMax = Integer.parseInt(modifiedPartMax.getText());


            errorOutputString = Inventory.inputValidator(partName, partStock, partPrice, partMin,
                    partMax, errorOutputString);

            if (errorOutputString.length() > 0)
            {
                errorOutput.setText(errorOutputString);
                errorOutputString = "";
            }
            else
            {
                if (inHouseToggle.isSelected() == true)
                {
                    int partMachineId = Integer.parseInt(modifiedSource.getText());

                    InHouse modifiedInHousePart = new InHouse(partId, partName, partPrice, partStock,
                            partMin, partMax, partMachineId);

                    inventory.updatePart(modifiedPartIndex, modifiedInHousePart);
                }
                else
                {
                    String partCompanyName = modifiedSource.getText();
                    Outsourced modifiedOutsourcedPart = new Outsourced(partId, partName, partPrice, partStock,
                            partMin, partMax, partCompanyName);

                    inventory.updatePart(modifiedPartIndex, modifiedOutsourcedPart);
                }

                // Switch to main screen
                Parent prevScene = FXMLLoader.load(getClass().getResource("Main.fxml"));
                Scene scene = new Scene(prevScene);
                Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
                window.setScene(scene);
                window.show();
            }
        }
        catch(NumberFormatException e)
        {
            if(e.getLocalizedMessage().contains("empty"))
            {
                errorOutput.setText("One or more fields are blank");
            }
            else
            {
                errorOutput.setText("Improper value entered for " + e.getLocalizedMessage().substring(3));
            }
        }
    }

    /** Redirects user to the Main screen.
     @param event An object generated by the ActionEvent that is triggered by the user clicking the Cancel button.
     */
    @FXML
    private void cancelModifiedPartHandler(ActionEvent event) throws IOException
    {
        Parent prevScene = FXMLLoader.load(getClass().getResource("Main.fxml"));
        Scene scene = new Scene(prevScene);
        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }
}
