package View_Controller;

import Model.*;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import static Model.Inventory.inputValidator;
import static View_Controller.MainController.getCurrentInventory;

/** FXML Controller Class*/
public class AddPartController implements Initializable
{

    @FXML private ToggleGroup toggleSource;
    @FXML private RadioButton inHouseToggle;
    @FXML private RadioButton outsourceToggle;
    @FXML private TextField addedPartId;
    @FXML private TextField addedPartName;
    @FXML private TextField addedStockInput;
    @FXML private TextField addedPartPrice;
    @FXML private TextField addedPartMin;
    @FXML private TextField addedPartMax;
    @FXML private TextField addedPartSource;
    @FXML private Label sourceName;
    @FXML private Label errorOutput;
    @FXML private Button saveAddedPart;
    @FXML private Button cancelAddedPart;

    /** A string variable that will store all the error outputs generated from the Inventory Class method, inputValidator.
     This variable is used during the savePartHandler, where all user inputs are validated prior to saving the part.
     If any errors are caught, the contents of the errorOutPutString are displayed on the Add Part window in red text.
     */
    String errorOutputString = new String();

    /** Gets the current inventory to update with an added part.
     */
    private Inventory inventory = getCurrentInventory();

    /** Instantiates a Part object to define and add to inventory.
     */
    private Part addedPart;

    /** Sets the initial conditions of the Add Part scene. This method sets the ID field to disabled, with pre-populated
     text, "Auto-generated". In addition, it pre-selects the InHouse radio button.
     @param url Resolves the relative file path of the root object.
     @param rb Localizes the root object.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb)
    {
        addedPartId.setDisable(true);
        addedPartId.setText("Auto-generated");
        inHouseToggle.setSelected(true);
    }

    /** Enables the user to select either InHouse or Outsourced, but not both. Based on this user selection, the label
     sourceName will change to 'Machine ID' or 'Company Name'.
     @param event An object generated by the ActionEvent that is triggered by the user clicking either the InHouse or
     Outsourced radio buttons.
     */
    @FXML
    private void sourceToggleHandler(ActionEvent event)
    {
        if(event.getSource() == inHouseToggle)
        {
            sourceName.setText("Machine ID");
        }
        else
        {
            sourceName.setText("Company Name");
        }
    }

    /** Saves the added part into the current inventory. The method will validate all entries in the form and output
     any applicable errors on the form in red text. Otherwise if no errors are found, then the method updates the
     current inventory with the added part.
     @param event An object generated by the ActionEvent that is triggered by the user clicking the Save button.
     */
    @FXML
    private void saveAddedPartHandler(ActionEvent event) throws IOException
    {
        try
        {
            int id = inventory.getPartIdIndex();
            String name = addedPartName.getText();
            int stock = Integer.parseInt((addedStockInput.getText()));
            double price = Double.parseDouble((addedPartPrice.getText()));
            int min = Integer.parseInt((addedPartMin.getText()));
            int max = Integer.parseInt((addedPartMax.getText()));

            errorOutputString = inputValidator(name, stock, price, min, max, errorOutputString);

            if(errorOutputString.length() > 0)
            {
                errorOutput.setText(errorOutputString);
                errorOutputString = "";
            }
            else
            {
                if(inHouseToggle.isSelected() == true)
                {
                    int machineId = Integer.parseInt(addedPartSource.getText());

                    InHouse inHouseAddedPart = new InHouse(id, name, price, stock, min, max, machineId);
                    inventory.addPart(inHouseAddedPart);
                }
                else
                {
                    String companyName = addedPartSource.getText();
                    Outsourced outsourcedAddedPart = new Outsourced(id, name, price, stock, min, max, companyName);
                    inventory.addPart(outsourcedAddedPart);
                }
                // Switch back to main screen
                Parent prevScene = FXMLLoader.load(getClass().getResource("Main.fxml"));
                Scene scene = new Scene(prevScene);
                Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
                window.setScene(scene);
                window.show();
            }
        }

        catch(NumberFormatException e)
        {
            if(e.getLocalizedMessage().contains("empty"))
            {
                errorOutput.setText("One or more fields are blank");
            }
            else
            {
                errorOutput.setText("Improper value entered for " + e.getLocalizedMessage().substring(3));
            }
        }
    }

    /** Redirects user to the Main screen.
     @param event An object generated by the ActionEvent that is triggered by the user clicking the Cancel button.
     */
    @FXML
    private void cancelAddedPartHandler(ActionEvent event) throws IOException
    {
        Parent prevScene = FXMLLoader.load(getClass().getResource("Main.fxml"));
        Scene scene = new Scene(prevScene);
        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }
}
